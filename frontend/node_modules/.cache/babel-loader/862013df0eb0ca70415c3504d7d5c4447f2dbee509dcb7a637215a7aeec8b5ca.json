{"ast":null,"code":"import React,{useState}from'react';import{useNavigate}from'react-router-dom';// Import useNavigate hook\nimport\"./login.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Login(_ref){let{loginStatus,loginStatusMethod}=_ref;const[isLoginMode,setIsLoginMode]=useState(true);const[showPopup,setShowPopup]=useState(false);const[popupMessage,setPopupMessage]=useState('');const navigate=useNavigate();// Initialize navigate function\nconst toggleMode=()=>{setIsLoginMode(!isLoginMode);setShowPopup(false);// Hide popup when toggling mode\n};const handleSubmit=event=>{event.preventDefault();const email=document.getElementById('email').value;const password=document.getElementById('password').value;if(isLoginMode){// Login logic\nif(email==='user@example.com'&&password==='password'){// Navigate to /home if login is successful\nloginStatusMethod();navigate('/coursecontent');}else{setPopupMessage('Login Failed!');setShowPopup(true);setTimeout(()=>setShowPopup(false),3000);}}else{// Signup logic (simplified example)\nif(email&&password&&loginStatus){// Navigate to /login on successful signup\nnavigate('/login');}else{setPopupMessage('Signup Failed!');setShowPopup(true);setTimeout(()=>setShowPopup(false),3000);}}};const renderForm=()=>/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"email\",children:\"Email:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"email\",id:\"email\",required:true}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"password\",children:\"Password:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",id:\"password\",required:true}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:isLoginMode?'Login':'Sign Up'})]});return/*#__PURE__*/_jsxs(\"div\",{className:\"login-container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:isLoginMode?'Login':'Sign Up'}),/*#__PURE__*/_jsx(\"form\",{onSubmit:handleSubmit,method:\"post\",children:renderForm()}),showPopup&&/*#__PURE__*/_jsx(\"div\",{className:\"popup\",style:{backgroundColor:'#f44336',color:'#fff'},children:popupMessage}),/*#__PURE__*/_jsxs(\"p\",{children:[isLoginMode?\"Don't have an account? \":\"Already have an account? \",/*#__PURE__*/_jsx(\"button\",{onClick:toggleMode,id:\"toggleModeButton\",children:isLoginMode?'Sign Up Here':'Login Here'})]})]});}export default Login;","map":{"version":3,"names":["React","useState","useNavigate","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Login","_ref","loginStatus","loginStatusMethod","isLoginMode","setIsLoginMode","showPopup","setShowPopup","popupMessage","setPopupMessage","navigate","toggleMode","handleSubmit","event","preventDefault","email","document","getElementById","value","password","setTimeout","renderForm","children","htmlFor","type","id","required","className","onSubmit","method","style","backgroundColor","color","onClick"],"sources":["C:/Javascript/learning app/learning-app-combinedwithbuild/frontend/src/component/login/login.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate hook\nimport \"./login.css\";\n\nfunction Login({loginStatus,loginStatusMethod}) {\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const [showPopup, setShowPopup] = useState(false);\n  const [popupMessage, setPopupMessage] = useState('');\n  const navigate = useNavigate(); // Initialize navigate function\n\n  const toggleMode = () => {\n    setIsLoginMode(!isLoginMode);\n    setShowPopup(false); // Hide popup when toggling mode\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    \n    const email = document.getElementById('email').value;\n    const password = document.getElementById('password').value;\n    \n    if (isLoginMode) {\n      // Login logic\n      if (email === 'user@example.com' && password === 'password') {\n        // Navigate to /home if login is successful\n        loginStatusMethod();\n        navigate('/coursecontent');\n      } else {\n        setPopupMessage('Login Failed!');\n        setShowPopup(true);\n        setTimeout(() => setShowPopup(false), 3000);\n      }\n    } else {\n      // Signup logic (simplified example)\n      if (email && password && loginStatus) {\n        // Navigate to /login on successful signup\n        navigate('/login');\n      } else {\n        setPopupMessage('Signup Failed!');\n        setShowPopup(true);\n        setTimeout(() => setShowPopup(false), 3000);\n      }\n    }\n  };\n\n  const renderForm = () => (\n    <>\n      <label htmlFor=\"email\">Email:</label>\n      <input type=\"email\" id=\"email\" required />\n      <label htmlFor=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" required />\n      <button type=\"submit\">{isLoginMode ? 'Login' : 'Sign Up'}</button>\n    </>\n  );\n\n  return (\n    <div className=\"login-container\">\n      <h1>{isLoginMode ? 'Login' : 'Sign Up'}</h1>\n      <form onSubmit={handleSubmit} method='post'>\n        {renderForm()}\n      </form>\n      {showPopup && (\n        <div className=\"popup\" style={{backgroundColor: '#f44336', color: '#fff'}}>\n          {popupMessage}\n        </div>\n      )}\n      <p>\n        {isLoginMode ? \"Don't have an account? \" : \"Already have an account? \"}\n        {/* Using button instead of a link to prevent page reload */}\n        <button onClick={toggleMode} id=\"toggleModeButton\">\n          {isLoginMode ? 'Sign Up Here' : 'Login Here'}\n        </button>\n      </p>\n    </div>\n  );\n}\n\nexport default Login;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}